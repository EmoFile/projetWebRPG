# Generated by Django 3.0.3 on 2020-02-21 11:48

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Jon Doe', max_length=20)),
                ('level', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('xp', models.PositiveIntegerField(default=0)),
                ('hpMax', models.IntegerField(default=10)),
                ('hp', models.IntegerField(default=10)),
                ('strength', models.IntegerField(default=1)),
                ('agility', models.IntegerField(default=1)),
                ('intelligence', models.IntegerField(default=1)),
                ('physicalResistance', models.IntegerField(default=0)),
                ('magicalResistance', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='CharacterClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=20, null=True)),
                ('minHpMax', models.PositiveIntegerField(default=10, validators=[django.core.validators.MinValueValidator(5)])),
                ('maxHpMax', models.PositiveIntegerField(default=20, validators=[django.core.validators.MinValueValidator(10)])),
                ('minStrength', models.IntegerField(default=-10)),
                ('maxStrength', models.IntegerField(default=10)),
                ('minAgility', models.IntegerField(default=-10)),
                ('maxAgility', models.IntegerField(default=10)),
                ('minInt', models.IntegerField(default=-10)),
                ('maxInt', models.IntegerField(default=10)),
                ('minPhysRes', models.IntegerField(default=-10)),
                ('maxPhysRes', models.IntegerField(default=10)),
                ('minMagRes', models.IntegerField(default=-10)),
                ('maxMagRes', models.IntegerField(default=10)),
            ],
        ),
        migrations.CreateModel(
            name='Chest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='New Item', max_length=250)),
                ('rarity', models.CharField(choices=[('Common', 'Common'), ('Rare', 'Rare'), ('Epic', 'Epic'), ('Legendary', 'Legendary')], default='Common', max_length=10)),
                ('strength', models.IntegerField(default=0)),
                ('agility', models.IntegerField(default=0)),
                ('intelligence', models.IntegerField(default=0)),
                ('requiredLevel', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('hpMax', models.IntegerField(default=0)),
                ('physicalResistance', models.IntegerField(default=0)),
                ('magicalResistance', models.IntegerField(default=0)),
                ('characterClass', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='chestCharacterClass', to='app.CharacterClass')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Consumable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='New Item', max_length=250)),
                ('rarity', models.CharField(choices=[('Common', 'Common'), ('Rare', 'Rare'), ('Epic', 'Epic'), ('Legendary', 'Legendary')], default='Common', max_length=10)),
                ('strength', models.IntegerField(default=0)),
                ('agility', models.IntegerField(default=0)),
                ('intelligence', models.IntegerField(default=0)),
                ('hp', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'abstract': False,
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='Enemy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='un mec', max_length=20)),
                ('hpMax', models.PositiveIntegerField(default=10)),
                ('hp', models.PositiveIntegerField(default=10)),
                ('strength', models.IntegerField(default=1)),
                ('agility', models.IntegerField(default=1)),
                ('intelligence', models.IntegerField(default=1)),
                ('physical_resistance', models.IntegerField(default=0)),
                ('magical_resistance', models.IntegerField(default=0)),
                ('is_boss', models.BooleanField(default=False)),
                ('diceNumber', models.PositiveIntegerField(default=1)),
                ('damage', models.PositiveIntegerField(default=4)),
                ('next', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Enemy')),
            ],
        ),
        migrations.CreateModel(
            name='Head',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='New Item', max_length=250)),
                ('rarity', models.CharField(choices=[('Common', 'Common'), ('Rare', 'Rare'), ('Epic', 'Epic'), ('Legendary', 'Legendary')], default='Common', max_length=10)),
                ('strength', models.IntegerField(default=0)),
                ('agility', models.IntegerField(default=0)),
                ('intelligence', models.IntegerField(default=0)),
                ('requiredLevel', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('hpMax', models.IntegerField(default=0)),
                ('physicalResistance', models.IntegerField(default=0)),
                ('magicalResistance', models.IntegerField(default=0)),
                ('characterClass', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='headCharacterClass', to='app.CharacterClass')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chestInventory', to='app.Chest')),
            ],
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stage', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('date', models.DateField(default=datetime.date.today, verbose_name='Date')),
                ('isEnded', models.BooleanField(default=False)),
                ('character', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='app.Character')),
            ],
        ),
        migrations.CreateModel(
            name='BossAlain',
            fields=[
                ('enemy_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.Enemy')),
            ],
            bases=('app.enemy',),
        ),
        migrations.CreateModel(
            name='Minion',
            fields=[
                ('enemy_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.Enemy')),
            ],
            bases=('app.enemy',),
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='New Item', max_length=250)),
                ('rarity', models.CharField(choices=[('Common', 'Common'), ('Rare', 'Rare'), ('Epic', 'Epic'), ('Legendary', 'Legendary')], default='Common', max_length=10)),
                ('strength', models.IntegerField(default=0)),
                ('agility', models.IntegerField(default=0)),
                ('intelligence', models.IntegerField(default=0)),
                ('requiredLevel', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('hpMax', models.IntegerField(default=0)),
                ('physicalResistance', models.IntegerField(default=0)),
                ('magicalResistance', models.IntegerField(default=0)),
                ('oneHanded', models.BooleanField(default=True)),
                ('diceNumber', models.PositiveIntegerField(default=1)),
                ('damage', models.PositiveIntegerField(default=4)),
                ('characterClass', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='weaponCharacterClass', to='app.CharacterClass')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartyEnemy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hp', models.IntegerField(default=0)),
                ('enemy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Enemy')),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Party')),
            ],
        ),
        migrations.AddField(
            model_name='party',
            name='enemies',
            field=models.ManyToManyField(through='app.PartyEnemy', to='app.Enemy'),
        ),
        migrations.AddField(
            model_name='party',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Leg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='New Item', max_length=250)),
                ('rarity', models.CharField(choices=[('Common', 'Common'), ('Rare', 'Rare'), ('Epic', 'Epic'), ('Legendary', 'Legendary')], default='Common', max_length=10)),
                ('strength', models.IntegerField(default=0)),
                ('agility', models.IntegerField(default=0)),
                ('intelligence', models.IntegerField(default=0)),
                ('requiredLevel', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('hpMax', models.IntegerField(default=0)),
                ('physicalResistance', models.IntegerField(default=0)),
                ('magicalResistance', models.IntegerField(default=0)),
                ('characterClass', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='legCharacterClass', to='app.CharacterClass')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InventoryConsumable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('consumable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Consumable')),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Inventory')),
            ],
        ),
        migrations.AddField(
            model_name='inventory',
            name='consumables',
            field=models.ManyToManyField(through='app.InventoryConsumable', to='app.Consumable'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='head',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='headInventory', to='app.Head'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='leg',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='legInventory', to='app.Leg'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='weapon',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='weaponInventory', to='app.Weapon'),
        ),
        migrations.AddField(
            model_name='character',
            name='characterClass',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='characterClass', to='app.CharacterClass'),
        ),
        migrations.AddField(
            model_name='character',
            name='inventory',
            field=models.OneToOneField(blank=True, default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.Inventory'),
        ),
        migrations.AlterUniqueTogether(
            name='party',
            unique_together={('character',)},
        ),
    ]
